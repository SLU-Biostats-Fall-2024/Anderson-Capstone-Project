---
title: "Data Exploration"
format: html
editor: visual
---

# Data Exploration

## Set up

First, setting up the document.

```{r}
rm(list=ls())
library(here)
library(tidyverse)
library(ggfortify)
```

Next, read in the data

```{r}
plot <- read.csv(here("Data", "Moose_Plot_Data.csv"))
tree <- read.csv(here("Data", "Moose_Tree_Data.csv"))
```

## Data types

```{r}
glimpse(plot)
```

```{r}
glimpse(tree)
```

With glimpse, I can see that I also need to change the species variable to factor data, and plot could be factor data too.

The binary data I want to keep coded as 0, 1, and NA - *maybe I convert this to factor data too?*

I will change these here:

```{r}
plot$hilltop <- as.logical(plot$hilltop)
plot$swamp <- as.logical(plot$swamp)
plot$wetland_forest <- as.logical(plot$wetland_forest)
plot$harvest <- as.logical(plot$harvest)

tree$browsed <- as.logical(tree$browsed)
tree$stripped <- as.logical(tree$stripped)
tree$broken <- as.logical(tree$broken)

tree$species <- as.factor(tree$species)
tree$plot <- as.factor(tree$plot)
```

I will also change Watershed to categorical and the numbers 0 and 1 be replaced with the names of the two watersheds to make it less confusing.

```{r}

#First fix Quabbin Forest, the watershed labeled as 0
fixwatershed0 <- which(plot$watershed == "0")
plot$watershed[fixwatershed0] <- "Quabbin"

#Then fix Ware River Forest, the watershed labeled as 1
fixwatershed1 <- which(plot$watershed == "1")
plot$watershed[fixwatershed1] <- "Ware River"

#Now convert it to factor then check the levels to make sure it all worked.
plot$watershed <- as.factor(plot$watershed)
levels(plot$watershed)
```

## Detecting outliers

```{r}
# Checking browse_index first.
# Run code to get a summary of descriptive stats to compare the max and mins with the quartiles, median, and mean. 

summary(plot$browse_index)
```

```{r}
#Make a histogram of this variable to check it out. 

ggplot(plot, aes(x=browse_index))+
  geom_histogram()
```

The max value seems like it may be an outlier, considering how far from the mean and 3rd quartile that it is.

```{r}
# Find out more about this row:

which(plot$browse_index == 143.18) #This didn't work but I organized the rows from greatest to least in the table and it returned row number 156. 

slice(plot, 156)
```

I'm going to leave this data point, as this could possibly be an area that has a lot more moose browsing. The other values in the row seem normal. Considering that this data was used in a thesis and was very well organized when I got it, I could assume that it has been thoroughly checked over already as well.

```{r}
#Now check the summary stats for the whole dataset just to make things quicker. 
plot |>
  summary()
```

After reviewing the summary stats of the whole data set, it seems that the nature of the data is that there's many 0 values which some larger values. Considering that the data is about moose, who naturally might be absent from certain areas but have a higher density in other areas, these points that might seem like outliers could make sense. For this reason, and considering that the data is from a paper that likely had thorough analysis and review of the data, I'm going to leave all the points.

## Creating new variables

Ideally I'd like to create a new column that combines the three columns currently called "browsed", "stripped", and "broken." Maybe I could use mutate to get this...

```{r}
# I found the unite function through googling. It combines the three columns but ends up with the three values still distinct, just all in one column. This isn't quite what I want. 

# unite(tree, col='interaction', c('browsed', 'stripped', 'broken'), sep = '/')
```

```{r}
# Add a new column that combines browsed, stripped, and broken using mutate (function that modifies columns). Found a model of similar code through googling. 

tree.updated <- tree |>
  mutate(interaction = browsed + stripped + broken)

# However, this function added the value in the three columns together, instead of how I wanted, which is to keep the binary yes/no of whether there was moose interaction with the tree. (see next code chunk)

```

```{r}
#First change the column to factor data so I can see the levels. 
tree.updated$interaction <- as.factor(tree.updated$interaction)

# Check out the levels. Has 0, 1, and 2. 
levels(tree.updated$interaction)

#I just want 0 and 1. The 2 indicates that there were two types of interactions. This is extra info for what I want. I will change the rows with 2 to be 1 so that it's binary data.
#First make a fix object with all the rows that have 2. 
fix.interaction <- which(tree.updated$interaction == "2")

#Then apply the fix object to change all those rows with 2 to be 1.
tree.updated$interaction[fix.interaction] <- "1"
tree.updated$interaction <- factor(tree.updated$interaction)

levels(tree.updated$interaction)
```

```{r}
#Filter for just the rows with a 1 value for interaction. This indicates that they were interacted with in some way. There are 648 rows where this is true. 
tree.updated |>
  filter(interaction == "1")

#Then filter for rows where interaction is 0. There are 1,507 rows where this is the case. 
tree.updated |>
  filter(interaction == "0")

#Both of these add up to 2,155 rows. Meaning there should be 1,758 rows where the value is NA for interaction. 
tree.updated |>
  filter(interaction == "NA") #Doesn't seem to work to filter for NA values...
```

The NA's in the 'browsed' column indicate that no stems were within the available browse range or the status of browsed/unbrowsed was inconclusive so the stem was not assessed.

Change the interaction column to binary data type

```{r}
## tree.updated$interaction <- as.logical(tree.updated$interaction)
# Tried to run the above code but it just ended up making all the rows NA
glimpse(tree.updated)
```

Now look more into some structure

```{r}
levels(tree.updated$species) 
# Noticed that there are inconsistencies with these species names that I didn't catch earlier. 
```

Fix the species names:

```{r}
fix.blackbirch <- which(tree.updated$species == "black birch ")
tree.updated$species[fix.blackbirch] <- "black birch"
tree.updated$species <- factor(tree.updated$species)

fix.chestnut <- which(tree.updated$species == "Chestnut")
tree.updated$species[fix.chestnut] <- "chestnut"
tree.updated$species <- factor(tree.updated$species)

fix.hawthorn <- which(tree.updated$species == "hawthorne")
tree.updated$species[fix.hawthorn] <- "hawthorn"
tree.updated$species <- factor(tree.updated$species)

fix.hemlock <- which(tree.updated$species %in% c("hemlock", "Hemlock", "hemlock "))
tree.updated$species[fix.hemlock] <- "hemlock"
tree.updated$species <- factor(tree.updated$species)

fix.redmaple <- which(tree.updated$species %in% c("red maple", "Red maple", "red maple "))
tree.updated$species[fix.redmaple] <- "red maple"
tree.updated$species <- factor(tree.updated$species)

fix.redoak <- which(tree.updated$species == "red oak ")
tree.updated$species[fix.redoak] <- "red oak"
tree.updated$species <- factor(tree.updated$species)

fix.sugarmaple <- which(tree.updated$species == "sugarmaple")
tree.updated$species[fix.sugarmaple] <- "sugar maple"
tree.updated$species <- factor(tree.updated$species)

fix.whitepine <- which(tree.updated$species %in% c("white pine", "whte pine", "white pine "))
tree.updated$species[fix.whitepine] <- "white pine"
tree.updated$species <- factor(tree.updated$species)
```

Check on plot levels

```{r}
levels(tree.updated$plot) 
# There are 541 levels which makes sense because that's how many plots there are. There are 3,913 total observations/rows though, so theres many rows for each level. 
```

## Save updated dataset

Use write.csv to save the tree.updated dataset for use in place of the original Moose_Tree_Data.csv. The new dataset has the interaction variable to use in future analysis.

The Moose_Plot_Data.csv has not been modified and can be used for future analysis.

```{r}
#use write.csv - specify the data frame, specify where to save, specify what to save as

write.csv(tree.updated, here("Data", "Updated_Moose_Tree_Data.csv"))

#Save updated dataset for plot as well
write.csv(plot, here("Data", "Updated_Moose_Plot_Data.csv"))
```

## Exploratory data analysis

Time for some summary statistics and plots!

Make sure all the data is accurate and up to date.

```{r}
tree.updated <- read.csv(here("Data", "Updated_Moose_Tree_Data.csv")) 
# Should be the same as what had earlier, just testing that can read in the new csv file. 

plot <- read.csv(here("Data", "Updated_Moose_Plot_Data.csv"))
```

### Summary statistics:

```{r}
summary(tree.updated$dbh_cm)
#Shows that the mean dbh is 15.26 cm, with a max of 85 and a min of 1.20. These stats mean that there's more low value rows than high value rows because the data skews to the right. 
```

```{r}
summary(plot$browse_index) 
#This is also showing a right skew with many lower value rows and fewer higher value rows. The min is 0, the max is 143.18, but the mean is 27.09 and the median is 12.19. 
```

```{r}
summary(plot$elev_m) 
#These numbers seem more consistent, due to the fact that they're not generated by an animal's behavior. The min is 137, the max is 367, and the mean is 252.5 with a median of 254.5. 
```

```{r}
summary(plot$dist_h2o_m) 
#Also pretty variable. The min is 0, max is 984. Mean is 221 and median is 194.5. 
```

```{r}
summary(plot$harvest_intensity_m2.ha)
#The median being 0 for these numbers shows just how many 0s and low value there are for this column. The max is 298 and the mean is 25.65
```

```{r}
summary(plot$tall_shrubs)
#Once again a wide range - min is 0, max is 76. Mean is 5.41 and median is 1. 
```

```{r}
summary(plot$deer_density)
#Seems pretty equally/normally distributed with min being 1.2 and max 4.8. Mean is 2.845 and median is 3. These numbers are relatively all close. 
```

### Plots

#### [Histograms of browse index]{.underline}

```{r}
ggplot(plot, aes(x=browse_index))+
  geom_histogram(binwidth = 15)+
  facet_wrap(~harvest)+
  theme_bw()
#Use the plot dataset, with browse index as the x variable. Histogram chooses the y automatically, in this case it's count. Facet wrap divides the output into two histograms based on the variable harvest. 
```

This plot shows the browse index on the x and the number of observations of each value on the y. It's split between whether harvesting occurs in the plot or not. The larger bar at the low end of the false graph could be due to an unequal sample size between the two groups, rather than a real difference. The over shape looks similar between the two histograms, but there is a slight increase in browse_index in the true harvested points.

```{r}
ggplot(plot, aes(x=browse_index))+
  geom_histogram(binwidth = 15)+
  facet_wrap(~watershed)+
  theme_bw()
#Use the plot dataset, with browse index as the x variable. Histogram chooses the y automatically, in this case it's count. Facet wrap divides the output into two histograms based on the variable watershed. 
```

The variation in sizes could once again be due to a difference in sample size. However there does seem to be an increase around the 100 browse index mark in the Ware River watershed compared to the Quabbin.

#### [Scatterplots]{.underline}

```{r}
## Change the data type of interaction for the next graph to work properly. I'm not sure why it works to do it now, but didn't work earlier. 

tree.updated$interaction <- as.logical(tree.updated$interaction)
```

```{r}
ggplot(tree.updated, aes(x=species, y=dbh_cm, colour = interaction))+
  geom_point() +
  xlab("Species")+
  ylab("dbh in cm")+
  theme_bw()+
  coord_flip()
#Use the updated tree dataset with species as the x and dbh as the y, further distinguished by interaction using colors. Make it a scatterplot. Change the x and y axes names and remove the background. Use coord flip to try to improve readability of the x axis (rather unsuccessfully in this case). 
```

It's tricky to see patterns here with how many species there are. It may be better if I used a subset for analysis. There seems to be a lot of false for the hemlock and musclewood, and a lot of true for the black birch, red maple, and white pine. The NA values may also be a hinderance for analysis.

```{r}
ggplot(plot, aes(x=dist_h2o_m, y=browse_index, colour = harvest))+
  geom_point()+
  xlab("distance to water (m)")+
  ylab("browse index")+
  theme_bw()
# use the plot dataset and have distance to water as the x, browse index as the y, and distinguish further by harvest using color. Rename the axes for clarity and remove the background. 
```

The points seem to be fairly evenly scattered. It would be difficult to fit a slope to this points. This could indicate that distance to water does not have an impact on browse index. The harvested and unharvested points also is fairly evenly distributed.

```{r}
ggplot(plot, aes(x=dist_dev_m, y=browse_index, colour = harvest))+
  geom_point()+
  xlab("distance to development (m)")+
  ylab("browse index")+
  theme_bw()
# use the plot dataset and have distance to development as the x, browse index as the y, and distinguish further by harvest using color. Rename the axes for clarity and remove the background. 
```

Similar to the last plot with distance to water, there doesn't seem to be a clear pattern here with distance to development, browse index, and harvest. More of the points are on the farther side (1,000) of the x-axis however, compared to more points being closer to 0 for the distance to water plot.

#### [Box and whiskers plots]{.underline}

```{r}
ggplot(plot, aes(x=watershed, y=harvest_intensity_m2.ha, colour = harvest, shape = watershed))+
  geom_boxplot()+
  geom_point(position = "jitter", size = 2, alpha = 0.5)+
  xlab("watershed")+
  ylab("harvest intensity (m2/ha)")+
  theme_bw()

#Include a boxplot and the points. Make the points be colored by the variable harvest. Make the points size 2 and partly transparent. Use jitter to show the points more clearly, but then make the points be different shapes for the two so it's clear whic belongs to which. 
```

This plot shows the boxplot of each water shed's harvest intensity. The colors represent the binary variable harvest intensity, so the pink points correspond with sites of no harvesting, which is why they are at 0. There are a couple of points with a very high harvest intensity, and the Quabbin watershed seems like it might have a higher mean harvest intensity than the Ware River.

```{r}
ggplot(tree.updated, aes(x=interaction, y=dbh_cm))+
  geom_boxplot()+
  geom_point(position = "jitter", size = 2, alpha = 0.25)+
  xlab("interaction")+
  ylab("dbh (cm)")+
  theme_bw()
# Use the tree.updated dataset, with interaction as the x axis and dbh as the y. Use jitter, sizing, and transparency (alpha) to be able to see the points better. Rename the axes and remove the background. 
```

This plot shows the dbh (cm) of trees divided into those with moose interaction, those without, and NA values. It seems like there could be a higher mean dbh for the trees in which interaction is true compared to false.
